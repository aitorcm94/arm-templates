{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "defaultValue": "sogetiplatformbrandbf6a",
      "metadata": {
        "description": "The name must be unique across all existing storage account names in Azure. It must be 3 to 24 characters long, and can contain only lowercase letters and numbers."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Storage account location, default is same as resource group location."
      }
    },
    "storageAccountReplication": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GRS",
        "Standard_GZRS",
        "Standard_LRS",
        "Standard_RAGRS",
        "Standard_RAGZRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage account replication, for more info see 'https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy'."
      }
    },
    "kind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "BlobStorage",
        "BlockBlobStorage",
        "FileStorage",
        "Storage",
        "StorageV2"
      ],
      "metadata": {
        "description": "Indicates the type of storage account."
      }
    },
    "accessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Hot",
        "Cool"
      ],
      "metadata": {
        "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing."
      }
    },
    "minimumTlsVersion": {
      "type": "string",
      "defaultValue": "TLS1_2",
      "allowedValues": [
        "TLS1_0",
        "TLS1_1",
        "TLS1_2"
      ],
      "metadata": {
        "description": "Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property."
      }
    },
    "supportsHttpsTrafficOnly": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01."
      }
    },
    "allowBlobPublicAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property."
      }
    },
    "allowSharedKeyAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
      }
    },
    "allowCrossTenantReplication": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property."
      }
    },
    "defaultOAuth": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property."
      }
    },
    "networkAclsBypass": {
      "type": "string",
      "defaultValue": "AzureServices",
      "allowedValues": [
        "AzureServices",
        "Logging",
        "Metrics",
        "None"
      ],
      "metadata": {
        "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example: 'Logging, Metrics'), or None to bypass none of those traffics."
      }
    },
    "networkAclsDefaultAction": {
      "type": "string",
      "defaultValue": "Allow",
      "allowedValues": [
        "Allow",
        "Deny"
      ],
      "metadata": {
        "description": "Specifies the default action of allow or deny when no other rules match."
      }
    },
    "isHnsEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Account HierarchicalNamespace enabled if sets to true."
      }
    },
    "isSftpEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enables Secure File Transfer Protocol, if set to true."
      }
    },
    "keySource": {
      "type": "string",
      "defaultValue": "Microsoft.Storage",
      "allowedValues": [
        "Microsoft.Keyvault",
        "Microsoft.Storage"
      ],
      "metadata": {
        "description": "The encryption keySource (provider). Possible values (case-insensitive): Microsoft.Storage, Microsoft.Keyvault"
      }
    },
    "encryptionEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "A boolean indicating whether or not enabling encryption for all the Storage Account services."
      }
    },
    "infrastructureEncryptionEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest."
      }
    },
    "tagDisplayName": {
      "type": "string",
      "defaultValue": "FUNC",
      "metadata": {
        "description": "Tag for the Display Name."
      }
    },
    "tagEnvironmentType": {
      "type": "string",
      "defaultValue": "DEV",
      "metadata": {
        "description": "Tag for the Environment Type."
      }
    },
    "tagProjectName": {
      "type": "string",
      "defaultValue": "Brand Reputation Prototype",
      "metadata": {
        "description": "Tag for the Project Name."
      }
    },
    "tagBillingIdentifier": {
      "type": "string",
      "defaultValue": "SogetiLab",
      "metadata": {
        "description": "Tag for the Billing Identifier."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": {
          "displayName": "[parameters('tagDisplayName')]",
          "environmentType": "[parameters('tagEnvironmentType')]",
          "projectName": "[parameters('tagProjectName')]",
          "billingIdentifier": "[parameters('tagBillingIdentifier')]"
      },
      "sku": {
        "name": "[parameters('storageAccountReplication')]"
      },
      "kind": "[parameters('kind')]",
      "properties": {
        "accessTier": "[parameters('accessTier')]",
        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
        "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
        "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
        "defaultToOAuthAuthentication": "[parameters('defaultOAuth')]",
        "networkAcls": {
          "bypass": "[parameters('networkAclsBypass')]",
          "defaultAction": "[parameters('networkAclsDefaultAction')]"
        },
        "isHnsEnabled": "[parameters('isHnsEnabled')]",
        "isSftpEnabled": "[parameters('isSftpEnabled')]",
        "encryption": {
          "keySource": "[parameters('keySource')]",
          "services": {
            "blob": {
              "enabled": "[parameters('encryptionEnabled')]"
            },
            "file": {
              "enabled": "[parameters('encryptionEnabled')]"
            },
            "table": {
              "enabled": "[parameters('encryptionEnabled')]"
            },
            "queue": {
              "enabled": "[parameters('encryptionEnabled')]"
            }
          },
          "requireInfrastructureEncryption": "[parameters('infrastructureEncryptionEnabled')]"
        }
      }
    }
  ]
}